### Script SQL ejecutable para MySQL/MariaDB (ERP sencillo con 4 módulos y procesos)

Incluye ABM de clientes, productos y usuarios; registro de compras y ventas con sus etapas de proceso; claves foráneas; restricciones; y triggers para stock y totales.

```sql
-- ERP demo schema for MySQL/MariaDB

SET NAMES utf8mb4;
SET time_zone = '+00:00';
SET sql_mode = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

DROP DATABASE IF EXISTS erp_demo;
CREATE DATABASE erp_demo CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
USE erp_demo;

-- =========================
-- Maestros (ABM)
-- =========================

CREATE TABLE clientes (
  id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  nombre VARCHAR(200) NOT NULL,
  direccion VARCHAR(300) NULL,
  telefono VARCHAR(50) NULL,
  email VARCHAR(200) NULL,
  activo TINYINT(1) NOT NULL DEFAULT 1,
  creado_en TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id),
  UNIQUE KEY ux_clientes_email (email)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE usuarios (
  id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  username VARCHAR(100) NOT NULL,
  password_hash VARCHAR(255) NOT NULL,
  rol ENUM('admin','vendedor','consulta') NOT NULL,
  activo TINYINT(1) NOT NULL DEFAULT 1,
  creado_en TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id),
  UNIQUE KEY ux_usuarios_username (username)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE productos (
  id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  nombre VARCHAR(200) NOT NULL,
  descripcion TEXT NULL,
  precio DECIMAL(12,2) NOT NULL DEFAULT 0.00,
  stock INT UNSIGNED NOT NULL DEFAULT 0,
  stock_minimo INT UNSIGNED NOT NULL DEFAULT 0,
  activo TINYINT(1) NOT NULL DEFAULT 1,
  creado_en TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id),
  UNIQUE KEY ux_productos_nombre (nombre),
  CHECK (precio >= 0),
  CHECK (stock >= 0),
  CHECK (stock_minimo >= 0)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Maestro auxiliar para compras
CREATE TABLE proveedores (
  id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  nombre VARCHAR(200) NOT NULL,
  contacto VARCHAR(200) NULL,
  telefono VARCHAR(50) NULL,
  email VARCHAR(200) NULL,
  creado_en TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id),
  UNIQUE KEY ux_proveedores_nombre (nombre)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- =========================
-- Procesos (workflow) para ABM
-- =========================
-- Estados comunes: solicitado -> validado -> actualizado -> confirmado

CREATE TABLE wf_clientes (
  id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  cliente_id BIGINT UNSIGNED NULL,        -- puede ser NULL en alta hasta crear cliente
  accion ENUM('alta','modificacion','baja') NOT NULL,
  estado ENUM('solicitado','validado','actualizado','confirmado') NOT NULL DEFAULT 'solicitado',
  solicitante_usuario_id BIGINT UNSIGNED NOT NULL,
  solicitado_en DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  validado_en DATETIME NULL,
  actualizado_en DATETIME NULL,
  confirmado_en DATETIME NULL,
  observaciones VARCHAR(500) NULL,
  PRIMARY KEY (id),
  KEY ix_wf_clientes_cliente (cliente_id),
  KEY ix_wf_clientes_estado (estado),
  CONSTRAINT fk_wf_clientes_cliente
    FOREIGN KEY (cliente_id) REFERENCES clientes(id)
    ON UPDATE CASCADE ON DELETE SET NULL,
  CONSTRAINT fk_wf_clientes_solicitante
    FOREIGN KEY (solicitante_usuario_id) REFERENCES usuarios(id)
    ON UPDATE RESTRICT ON DELETE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE wf_productos (
  id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  producto_id BIGINT UNSIGNED NULL,       -- puede ser NULL en alta
  accion ENUM('alta','modificacion','baja') NOT NULL,
  estado ENUM('solicitado','validado','actualizado','confirmado') NOT NULL DEFAULT 'solicitado',
  solicitante_usuario_id BIGINT UNSIGNED NOT NULL,
  solicitado_en DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  validado_en DATETIME NULL,
  actualizado_en DATETIME NULL,
  confirmado_en DATETIME NULL,
  nombre VARCHAR(200) NULL,
  descripcion TEXT NULL,
  precio DECIMAL(12,2) NULL,
  stock_minimo INT UNSIGNED NULL,
  observaciones VARCHAR(500) NULL,
  PRIMARY KEY (id),
  KEY ix_wf_productos_producto (producto_id),
  KEY ix_wf_productos_estado (estado),
  CONSTRAINT fk_wf_productos_producto
    FOREIGN KEY (producto_id) REFERENCES productos(id)
    ON UPDATE CASCADE ON DELETE SET NULL,
  CONSTRAINT fk_wf_productos_solicitante
    FOREIGN KEY (solicitante_usuario_id) REFERENCES usuarios(id)
    ON UPDATE RESTRICT ON DELETE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE wf_usuarios (
  id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  afectado_usuario_id BIGINT UNSIGNED NULL,  -- puede ser NULL en alta
  accion ENUM('alta','modificacion','baja') NOT NULL,
  estado ENUM('solicitado','validado','actualizado','confirmado') NOT NULL DEFAULT 'solicitado',
  solicitante_usuario_id BIGINT UNSIGNED NOT NULL,
  solicitado_en DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  validado_en DATETIME NULL,
  actualizado_en DATETIME NULL,
  confirmado_en DATETIME NULL,
  rol_solicitado ENUM('admin','vendedor','consulta') NULL,
  observaciones VARCHAR(500) NULL,
  PRIMARY KEY (id),
  KEY ix_wf_usuarios_afectado (afectado_usuario_id),
  KEY ix_wf_usuarios_estado (estado),
  CONSTRAINT fk_wf_usuarios_afectado
    FOREIGN KEY (afectado_usuario_id) REFERENCES usuarios(id)
    ON UPDATE CASCADE ON DELETE SET NULL,
  CONSTRAINT fk_wf_usuarios_solicitante
    FOREIGN KEY (solicitante_usuario_id) REFERENCES usuarios(id)
    ON UPDATE RESTRICT ON DELETE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- =========================
-- Ventas
-- =========================
-- Proceso: solicitud -> validado -> registrado -> stock_actualizado -> comprobante_emitido

CREATE TABLE ventas (
  id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  cliente_id BIGINT UNSIGNED NOT NULL,
  usuario_id BIGINT UNSIGNED NOT NULL,
  fecha DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  total DECIMAL(14,2) NOT NULL DEFAULT 0.00,
  estado ENUM('solicitud','validado','registrado','stock_actualizado','comprobante_emitido') NOT NULL DEFAULT 'solicitud',
  validado_en DATETIME NULL,
  registrado_en DATETIME NULL,
  stock_actualizado_en DATETIME NULL,
  comprobante_emitido_en DATETIME NULL,
  PRIMARY KEY (id),
  KEY ix_ventas_cliente (cliente_id),
  KEY ix_ventas_usuario (usuario_id),
  KEY ix_ventas_estado (estado),
  CONSTRAINT fk_ventas_cliente
    FOREIGN KEY (cliente_id) REFERENCES clientes(id)
    ON UPDATE RESTRICT ON DELETE RESTRICT,
  CONSTRAINT fk_ventas_usuario
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id)
    ON UPDATE RESTRICT ON DELETE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE detalle_ventas (
  id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  venta_id BIGINT UNSIGNED NOT NULL,
  producto_id BIGINT UNSIGNED NOT NULL,
  cantidad INT UNSIGNED NOT NULL,
  precio_unitario DECIMAL(12,2) NOT NULL,
  subtotal DECIMAL(14,2) AS (cantidad * precio_unitario) STORED,
  PRIMARY KEY (id),
  KEY ix_detalle_ventas_venta (venta_id),
  KEY ix_detalle_ventas_producto (producto_id),
  CONSTRAINT fk_detalle_ventas_venta
    FOREIGN KEY (venta_id) REFERENCES ventas(id)
    ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_detalle_ventas_producto
    FOREIGN KEY (producto_id) REFERENCES productos(id)
    ON UPDATE RESTRICT ON DELETE RESTRICT,
  CHECK (cantidad > 0),
  CHECK (precio_unitario >= 0)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- =========================
-- Compras
-- =========================
-- Proceso: entrega -> entrada_registrada -> stock_actualizado -> comprobante_emitido

CREATE TABLE compras (
  id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  proveedor_id BIGINT UNSIGNED NOT NULL,
  usuario_id BIGINT UNSIGNED NOT NULL,
  fecha DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  total DECIMAL(14,2) NOT NULL DEFAULT 0.00,
  estado ENUM('entrega','entrada_registrada','stock_actualizado','comprobante_emitido') NOT NULL DEFAULT 'entrega',
  entrega_en DATETIME NULL,
  entrada_registrada_en DATETIME NULL,
  stock_actualizado_en DATETIME NULL,
  comprobante_emitido_en DATETIME NULL,
  PRIMARY KEY (id),
  KEY ix_compras_proveedor (proveedor_id),
  KEY ix_compras_usuario (usuario_id),
  KEY ix_compras_estado (estado),
  CONSTRAINT fk_compras_proveedor
    FOREIGN KEY (proveedor_id) REFERENCES proveedores(id)
    ON UPDATE RESTRICT ON DELETE RESTRICT,
  CONSTRAINT fk_compras_usuario
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id)
    ON UPDATE RESTRICT ON DELETE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE detalle_compras (
  id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  compra_id BIGINT UNSIGNED NOT NULL,
  producto_id BIGINT UNSIGNED NOT NULL,
  cantidad INT UNSIGNED NOT NULL,
  precio_unitario DECIMAL(12,2) NOT NULL,
  subtotal DECIMAL(14,2) AS (cantidad * precio_unitario) STORED,
  PRIMARY KEY (id),
  KEY ix_detalle_compras_compra (compra_id),
  KEY ix_detalle_compras_producto (producto_id),
  CONSTRAINT fk_detalle_compras_compra
    FOREIGN KEY (compra_id) REFERENCES compras(id)
    ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_detalle_compras_producto
    FOREIGN KEY (producto_id) REFERENCES productos(id)
    ON UPDATE RESTRICT ON DELETE RESTRICT,
  CHECK (cantidad > 0),
  CHECK (precio_unitario >= 0)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- =========================
-- Triggers: stock y totales
-- =========================

DELIMITER $$

-- Ventas: validar stock y actualizar totales/stock
CREATE TRIGGER trg_detalle_ventas_bi_check
BEFORE INSERT ON detalle_ventas
FOR EACH ROW
BEGIN
  IF NEW.precio_unitario IS NULL THEN
    SELECT precio INTO NEW.precio_unitario FROM productos WHERE id = NEW.producto_id;
  END IF;
  DECLARE s INT UNSIGNED;
  SELECT stock INTO s FROM productos WHERE id = NEW.producto_id FOR UPDATE;
  IF s < NEW.cantidad THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Stock insuficiente para venta';
  END IF;
END$$

CREATE TRIGGER trg_detalle_ventas_ai_update
AFTER INSERT ON detalle_ventas
FOR EACH ROW
BEGIN
  UPDATE productos SET stock = stock - NEW.cantidad WHERE id = NEW.producto_id;
  UPDATE ventas v
    SET v.total = (SELECT IFNULL(SUM(subtotal),0.00) FROM detalle_ventas dv WHERE dv.venta_id = NEW.venta_id),
        v.estado = IF(v.estado = 'solicitud','registrado',v.estado),
        v.registrado_en = IF(v.registrado_en IS NULL, CURRENT_TIMESTAMP, v.registrado_en)
  WHERE v.id = NEW.venta_id;
END$$

CREATE TRIGGER trg_detalle_ventas_au_update
AFTER UPDATE ON detalle_ventas
FOR EACH ROW
BEGIN
  IF OLD.producto_id = NEW.producto_id THEN
    UPDATE productos SET stock = stock + OLD.cantidad - NEW.cantidad WHERE id = NEW.producto_id;
  ELSE
    UPDATE productos SET stock = stock + OLD.cantidad WHERE id = OLD.producto_id;
    DECLARE s2 INT UNSIGNED;
    SELECT stock INTO s2 FROM productos WHERE id = NEW.producto_id FOR UPDATE;
    IF s2 < NEW.cantidad THEN
      SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Stock insuficiente al actualizar detalle de venta';
    END IF;
    UPDATE productos SET stock = stock - NEW.cantidad WHERE id = NEW.producto_id;
  END IF;

  UPDATE ventas v
    SET v.total = (SELECT IFNULL(SUM(subtotal),0.00) FROM detalle_ventas dv WHERE dv.venta_id = NEW.venta_id)
  WHERE v.id = NEW.venta_id;
END$$

CREATE TRIGGER trg_detalle_ventas_ad_update
AFTER DELETE ON detalle_ventas
FOR EACH ROW
BEGIN
  UPDATE productos SET stock = stock + OLD.cantidad WHERE id = OLD.producto_id;
  UPDATE ventas v
    SET v.total = (SELECT IFNULL(SUM(subtotal),0.00) FROM detalle_ventas dv WHERE dv.venta_id = OLD.venta_id)
  WHERE v.id = OLD.venta_id;
END$$

-- Compras: totales y stock según etapa (stock se suma en 'stock_actualizado' y se revierte si retrocede)
CREATE TRIGGER trg_detalle_compras_ai_total
AFTER INSERT ON detalle_compras
FOR EACH ROW
BEGIN
  UPDATE compras c
    SET c.total = (SELECT IFNULL(SUM(subtotal),0.00) FROM detalle_compras dc WHERE dc.compra_id = NEW.compra_id)
  WHERE c.id = NEW.compra_id;
END$$

CREATE TRIGGER trg_detalle_compras_au_total
AFTER UPDATE ON detalle_compras
FOR EACH ROW
BEGIN
  UPDATE compras c
    SET c.total = (SELECT IFNULL(SUM(subtotal),0.00) FROM detalle_compras dc WHERE dc.compra_id = NEW.compra_id)
  WHERE c.id = NEW.compra_id;
END$$

CREATE TRIGGER trg_detalle_compras_ad_total
AFTER DELETE ON detalle_compras
FOR EACH ROW
BEGIN
  UPDATE compras c
    SET c.total = (SELECT IFNULL(SUM(subtotal),0.00) FROM detalle_compras dc WHERE dc.compra_id = OLD.compra_id)
  WHERE c.id = OLD.compra_id;
END$$

-- Marcas de tiempo de etapas de compras
CREATE TRIGGER trg_compras_bu_timestamps
BEFORE UPDATE ON compras
FOR EACH ROW
BEGIN
  IF NEW.estado = 'entrega' AND OLD.estado <> 'entrega' AND NEW.entrega_en IS NULL THEN
    SET NEW.entrega_en = CURRENT_TIMESTAMP;
  END IF;
  IF NEW.estado = 'entrada_registrada' AND OLD.estado <> 'entrada_registrada' AND NEW.entrada_registrada_en IS NULL THEN
    SET NEW.entrada_registrada_en = CURRENT_TIMESTAMP;
  END IF;
  IF NEW.estado = 'stock_actualizado' AND OLD.estado <> 'stock_actualizado' AND NEW.stock_actualizado_en IS NULL THEN
    SET NEW.stock_actualizado_en = CURRENT_TIMESTAMP;
  END IF;
  IF NEW.estado = 'comprobante_emitido' AND OLD.estado <> 'comprobante_emitido' AND NEW.comprobante_emitido_en IS NULL THEN
    SET NEW.comprobante_emitido_en = CURRENT_TIMESTAMP;
  END IF;
END$$

CREATE TRIGGER trg_compras_au_stock_por_estado
AFTER UPDATE ON compras
FOR EACH ROW
BEGIN
  -- Sumar stock al pasar a 'stock_actualizado' desde etapas anteriores
  IF NEW.estado = 'stock_actualizado' AND OLD.estado IN ('entrega','entrada_registrada') THEN
    UPDATE productos p
    JOIN detalle_compras dc ON dc.producto_id = p.id
    SET p.stock = p.stock + dc.cantidad
    WHERE dc.compra_id = NEW.id;
  END IF;

  -- Revertir stock si retrocede desde 'stock_actualizado' a etapas anteriores
  IF OLD.estado = 'stock_actualizado' AND NEW.estado IN ('entrega','entrada_registrada') THEN
    UPDATE productos p
    JOIN detalle_compras dc ON dc.producto_id = p.id
    SET p.stock = p.stock - dc.cantidad
    WHERE dc.compra_id = NEW.id;
  END IF;
END$$

-- Marcas de tiempo de etapas de ventas (opcionales)
CREATE TRIGGER trg_ventas_bu_timestamps
BEFORE UPDATE ON ventas
FOR EACH ROW
BEGIN
  IF NEW.estado = 'validado' AND OLD.estado <> 'validado' AND NEW.validado_en IS NULL THEN
    SET NEW.validado_en = CURRENT_TIMESTAMP;
  END IF;
  IF NEW.estado = 'registrado' AND OLD.estado <> 'registrado' AND NEW.registrado_en IS NULL THEN
    SET NEW.registrado_en = CURRENT_TIMESTAMP;
  END IF;
  IF NEW.estado = 'stock_actualizado' AND OLD.estado <> 'stock_actualizado' AND NEW.stock_actualizado_en IS NULL THEN
    SET NEW.stock_actualizado_en = CURRENT_TIMESTAMP;
  END IF;
  IF NEW.estado = 'comprobante_emitido' AND OLD.estado <> 'comprobante_emitido' AND NEW.comprobante_emitido_en IS NULL THEN
    SET NEW.comprobante_emitido_en = CURRENT_TIMESTAMP;
  END IF;
END$$

DELIMITER ;

-- =========================
-- Índices útiles
-- =========================
CREATE INDEX ix_productos_activo ON productos (activo);
CREATE INDEX ix_usuarios_activo ON usuarios (activo);
CREATE INDEX ix_clientes_activo ON clientes (activo);

-- =========================
-- Notas rápidas de uso (ejemplos)
-- =========================
-- Alta de compra y avance de etapas:
-- INSERT INTO compras (proveedor_id, usuario_id) VALUES (1, 1);
-- INSERT INTO detalle_compras (compra_id, producto_id, cantidad, precio_unitario) VALUES (1, 1, 5, 100.00);
-- UPDATE compras SET estado = 'entrada_registrada' WHERE id = 1;
-- UPDATE compras SET estado = 'stock_actualizado' WHERE id = 1; -- aquí sube el stock
-- UPDATE compras SET estado = 'comprobante_emitido' WHERE id = 1;

-- Venta:
-- INSERT INTO ventas (cliente_id, usuario_id) VALUES (1, 1);
-- INSERT INTO detalle_ventas (venta_id, producto_id, cantidad, precio_unitario) VALUES (1, 1, 2, 120.00);
-- UPDATE ventas SET estado = 'validado' WHERE id = 1;
-- UPDATE ventas SET estado = 'comprobante_emitido' WHERE id = 1;
```

- Cumple: creación de `erp_demo`, ABM de clientes/productos/usuarios, procesos con etapas para ABM y para compras/ventas, relaciones y triggers para stock/totales. Ejecutable directo en MySQL/MariaDB.